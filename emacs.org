#+title: Emacs Configuratie
* Global key binds
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-b") 'compile)
(global-set-key (kbd "C-!") 'shell-command-on-region)
#+END_SRC
* general
 #+BEGIN_SRC emacs-lisp
(global-auto-revert-mode) 
(setq tab-width 8)
(setq defaul-tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'js2-basic-offset 'defaul-tab-width)
 #+END_SRC
* Evil-Mode
  #+BEGIN_SRC emacs-lisp  
(use-package evil
:ensure t
:config (evil-mode 1))
  #+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture))
  (require 'ox)
  (require 'cl)
#+END_SRC
** org-bullets
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
** org babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((shell .t )
			       (C . t)))
#+END_SRC
* Linum
  #+BEGIN_SRC emacs-lisp 
(add-hook 'prog-mode 'linum-mode)
(use-package linum-relative
  :load-path "linum-relative-master"
  :hook ((prog-mode) . linum-relative-mode))
(column-number-mode)
  #+END_SRC
* Autopair
  #+BEGIN_SRC emacs-lisp
(use-package autopair
:ensure t
:load-path "autopair-master"
:hook (prog-mode . autopair-mode))
  #+END_SRC
* Highlight indent
  #+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
:ensure t
:load-path "highlight-indent-guides-master"
:init (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
      (setq highlight-indent-guides-method 'column))

  #+END_SRC
* Dracula Theme
  #+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
(load-theme 'dracula t)
  #+END_SRC

* Visuals
  #+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(show-paren-mode 1)
  #+END_SRC
** Rainbow mode
Dit zal ervoor zorgen dat kleuren zoals #ffffff rood gekleurd zullen zijn.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Rainbow delimiters
Dit zorgt ervoor dat matching haakjes hetzelfde kleur zullen hebben.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* TLS
  #+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3") 
  #+END_SRC
* Custom code
** Inbetween parens
   #+BEGIN_SRC emacs-lisp
(defun inbetween-parentheses (beg end)
  (interactive (list (point) (mark)))
  (kill-region beg end)
  (insert "\(")
  (yank)
  (insert "\)"))
(global-set-key (kbd "C-x C-p") 'inbetween-parentheses)
   #+END_SRC
* Font
#+BEGIN_SRC emacs-lisp
(set-frame-font "Terminus-16")
#+END_SRC
* pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query))
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:bind ("C-x C-f" . 'helm-find-files))
#+END_SRC
** helm-rg
   #+BEGIN_SRC emacs-lisp
(use-package helm-rg
:ensure t 
:bind ("C-x C-S-s" . 'helm-rg)
)
   #+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
:bind ("C-x g" . magit-status)
)
#+END_SRC
* Javascript
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
:ensure t
:mode "\\.js\\'")
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
:ensure t
:hook (python-mode . py-autopep8-enable-on-save))
#+END_SRC
* Go
#+BEGIN_SRC emacs-lisp
(use-package go
:ensure t
:mode "\\.go\\'")
#+END_SRC
* Dumb jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config (setq dump-jump-force-searcher 'rg)
    :hook (prog-mode . dumb-jump-mode))
#+END_SRC
* Editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
    :ensure t
    :config 
      (add-hook 'prog-mode-hook (lambda () (editorconfig-mode 1))))
#+END_SRC
* SubWord
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
* Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
:ensure t
:mode "\\.rs\\'")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ob-rust
:ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package cargo
:ensure t
:hook (rust-mode . cargo-minor-mode))
#+END_SRC  

* Zig
#+BEGIN_SRC emacs-lisp
(use-package zig-mode
:ensure t
:mode "\\.zig'")
#+END_SRC

* Emojify
  #+BEGIN_SRC emacs-lisp
(use-package emojify
:ensure t
:hook (after-init-hook . global-emojify-mode))
  #+END_SRC

