#+title: Emacs Configuratie
* Global key binds
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-b") 'compile)
(global-set-key (kbd "C-!") 'shell-command-on-region)
(global-set-key (kbd "C-x p") 'pop-global-mark)
#+END_SRC
* general
 #+BEGIN_SRC emacs-lisp
(global-auto-revert-mode) 
(global-subword-mode 1)
;;(setq tab-width 8)
;;(setq defaul-tab-width 4)
;;(defvaralias 'c-basic-offset 'tab-width)
;;(defvaralias 'js2-basic-offset 'defaul-tab-width)
 #+END_SRC
* Evil-Mode
  #+BEGIN_SRC emacs-lisp  
(use-package evil
:ensure t
:config (evil-mode 1))
  #+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (use-package org 
    :bind ("C-c l" . org-store-link) 
    ("C-c a" . org-agenda) 
    ("C-c c" . org-capture) 
    :hook
    (org-mode . (lambda ()
		  (add-hook 'before-save-hook 'thibi/org-sort-files nil t)))
    :config
    (setq org-capture-templates
	  '(("D" "Add defintion to current file" item
	     (file+headline
	      (lambda () (buffer-file-name))
	      "Definitions"))
	    ("t" "Todo item" entry
	     (file "~/todo.org")
	     "* TODO  %? \n")
	    ("f" "Voeg film(uit clipboard) toe aan watchlist" entry
	     (file "~/Downloads/films/todownload.org")
	     "* TODO %?%x \n")
	    ("d" "Beschrijf een droom" entry
	     (file "~/org/dromen.org")
	     "* %?\nGedroomd tijdens de nacht van %u\n%i"))))
  (require 'ox)
  (require 'ox-latex)
  (setq org-latex-listings t)
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
  (add-to-list 'org-latex-packages-alist '("" "fontspec"))
  (with-no-warnings 
    (require 'cl))
#+END_SRC

*** Sorting org files
Some files are lists, for example my =todownload.org= file is a list of movies I want to download.
I append items to this list using =org-capture=.

=thibi/org-sorted-files= is an associative list mapping the absolute filename on the options of =org-sort-entries=.
=thibi/org-sort-files= is added as a hook to =org-mode= in the above =use-package= statement.
#+BEGIN_SRC emacs-lisp
  (setq thibi/org-sorted-files
	'(("/home/thibault/Downloads/films/todownload.org" . (t ?a))))

  (defun thibi/org-sort-files () 
    "Call org-sort-entries on the file of the current buffer if it is in the thibi/org-sorted-files list"
    (when (assoc (buffer-file-name) thibi/org-sorted-files) 
	(goto-char 0) 
			(apply #'org-sort-entries
			       (cdr (assoc (buffer-file-name)
						  thibi/org-sorted-files)))))
#+END_SRC

** org-bullets
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
** org babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t )
			       (shell . t )
			       (C . t)
			       (perl . t)
			       (python . t)
			       (js . t)))
#+END_SRC

*** Javascript

The function wrapper of javascript doesnt work.
#+BEGIN_SRC emacs-lisp 
  (setq org-babel-js-function-wrapper "%s")
#+END_SRC
** htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC
** org-ref
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :after org
    :ensure t)
#+END_SRC
* Autopair
  #+BEGIN_SRC emacs-lisp
(use-package autopair
:ensure t
:delight
:load-path "autopair-master"
:hook (prog-mode . autopair-mode))
  #+END_SRC
* Visuals
  #+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(show-paren-mode 1)
  #+END_SRC
** Linum
   
  #+BEGIN_SRC emacs-lisp 
(add-hook 'prog-mode 'linum-mode)
(use-package linum-relative
  :load-path "linum-relative-master"
  :delight
  :hook ((prog-mode) . linum-relative-mode))
(column-number-mode)
  #+END_SRC
** dracula theme
  #+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
(load-theme 'dracula t)
  #+END_SRC
** Rainbow mode
Dit zal ervoor zorgen dat kleuren zoals #ffffff rood gekleurd zullen zijn.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :delight
)
#+END_SRC
** Rainbow delimiters
Dit zorgt ervoor dat matching haakjes hetzelfde kleur zullen hebben.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :delight
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
(set-frame-font "Terminus-16" nil t)
#+END_SRC


** Highlight indent
  #+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
:ensure t
:delight
:load-path "highlight-indent-guides-master"
:init (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
      (setq highlight-indent-guides-method 'column))
  #+END_SRC
* TLS
  #+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3") 
  #+END_SRC
* pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query))
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:bind ("C-x C-f" . 'helm-find-files)
      ("M-x" . 'helm-M-x)
      ("C-x C-b" . 'helm-buffers-list))
#+END_SRC
** helm-rg
   #+BEGIN_SRC emacs-lisp
(use-package helm-rg
:ensure t 
:bind ("C-S-s" . 'helm-rg)
)
   #+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
:bind ("C-x g" . magit-status)
)
#+END_SRC
* Company
[[http://company-mode.github.io/][Company]] is a text completion framework for Emacs.
The name stands for "complete anything".
It uses pluggable back-ends and front-ends to retrieve and display completion candidates.
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :delight
      :hook (prog-mode . company-mode)
      :bind ("<backtab>" . company-auto-complete)
      :config 
      (setq company-minimum-prefix-length 2
	    company-idle-delay 0.0))
#+END_SRC

Completion will start automatically after you type a few letters.
The keybinds are initially mapped to =M-n= and =M-p= to navigate the completions.
The following block will remap it to =C-n= and =C-p=.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC
Search through the completions with C-s, C-r and C-o. Press M-(digit) to quickly complete with one of the first 10 candidates.
When the completion candidates are shown, press <f1> to display the documentation for the selected candidate, or C-w to see its source. Not all back-ends support this.
* Programming Languages 
** lsp
#+BEGIN_SRC emacs-lisp
  (setq lsp-keymap-prefix "C-l")
  (use-package lsp-mode
    :ensure t
    :delight
    :custom (lsp-prefer-flymake nil) 
    :config
    (require 'lsp-clients)
    ;; increases size of gc
    (setq gc-cons-threshold 100000000)
    ;; Increase the amount of data which Emacs reads from the process.
    (setq read-process-output-max (* 1024 1024))
    (setq lsp-rust-server 'rust-analyzer)
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	   ((c++-mode c-mode rust-mode python-mode
		      go-mode) . lsp-deferred))
    :commands (lsp lsp-deferred)
    :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
    ("C-l C-a" . lsp-execute-code-action))

  (use-package lsp-ui 
    :ensure t
    :delight
    :config
    (setq lsp-ui-doc-alignment 'frame)
    (setq lsp-ui-doc-position 'bottom)
    (setq lsp-ui-doc-delay 1)
    (setq lsp-ui-doc-max-width 50)
    :commands lsp-ui-mode)
  ;; if you are helm user
  (use-package helm-lsp
    :ensure t
    :delight
    :commands helm-lsp-workspace-symbol)
#+END_SRC

#+RESULTS:



** Javascript
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
:ensure t
:mode "\\.js\\'")
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
(use-package go-mode
:ensure t
:mode "\\.go\\'")
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
:ensure t
:mode "\\.rs\\'")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ob-rust
:ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package cargo
:ensure t
:hook (rust-mode . cargo-minor-mode))
#+END_SRC  
** Zig
#+BEGIN_SRC emacs-lisp
(use-package zig-mode
:ensure t
:mode "\\.zig'")
#+END_SRC
** Emacs-Lisp formatting
#+BEGIN_SRC emacs-lisp
(use-package elisp-format
:ensure t
:config
(setq elisp-format-column 80))
#+END_SRC

* Dumb jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :config (setq dump-jump-force-searcher 'rg)
    :hook (prog-mode . dumb-jump-mode))
#+END_SRC
* Editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
    :ensure t
    :delight
)
#+END_SRC

* Emojify
  #+BEGIN_SRC emacs-lisp
(use-package emojify
:ensure t
:delight
:hook (after-init-hook . global-emojify-mode))
  #+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
:ensure t
:delight
:hook (prog-mode . flycheck-mode))
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :delight
    :init
      (yas-global-mode 1))
  (use-package yasnippet-snippets
    :ensure t
    :delight)
  (use-package yasnippet-classic-snippets
    :delight
    :ensure t)
#+END_SRC
* llvm-mode
#+BEGIN_SRC emacs-lisp
(use-package llvm-mode
:load-path "llvm-mode"
:mode "\\.ll\\'")
#+END_SRC
